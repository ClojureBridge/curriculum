(page "module6.html"
      (:require [hoplon.reveal :refer [slideshow intro bullet chapter slide
                                       notes highlight column quicklist]]
                [tailrecursion.hoplon.reload :refer [reload-all]]))

(when (= (-> js/window .-location .-search) "?dev")
  (print "Autoreloading")
  (reload-all))

(defn code-list
  [& lst]
  (interpose ", " (map code lst)))

(defelem hlclj
  [attrs children]
  (highlight (assoc attrs :class "clojure") children))

(html
  (head)
  (body
    (slideshow
     :theme "mozilla-theme.css"
     (intro
      :title "Module 6")
     (chapter
      :title "More Data Structures" 
      (slide
       :title "Maps"
       (img :src "img/map.png"
            :alt "map"))
      (slide
       :title "Maps"
       (hlclj
        ;;{{
        {:first "Sally", :last "Brown", :job "programmer"}
        {:a 1, :b "two"}
        {}
        ;;}}
        )
       (ul (li "Similar to comments, commas are ignored by REPL")))
      (slide
       :title "Map functions"
       (hlclj
        ;;{{
        (map? {:first "Sally" :last "Brown"})
        ;;=> true
      
        (get {:first "Sally" :last "Brown"} :first)
        ;;=> "Sally"
       
        (get {:first "Sally"} :last :MISS)
        ;;=> :MISS
        ;;}}
        ))
      (slide
       :title "More map functions"
       (hlclj
        ;;{{
        (assoc {:first "Sally"} :last "Brown")
        ;;=> {:first "Sally", :last "Brown"}
       
        (dissoc {:first "Sally" :last "Brown"} :last)
        ;;=> {:first "Sally"}
       
        (merge {:first "Sally"} {:last "Brown"})
        ;;=> {:first "Sally", :last "Brown"}
       
        (count {:first "Sally" :last "Brown"})
        ;;=> 2
        ;;}}
        ))
      (slide
       :title "Even more map functions"
       (hlclj
        ;;{{
        (keys {:first "Sally" :last "Brown"})
        ;;=> (:first :last)
       
        (vals {:first "Sally" :last "Brown"})
        ;;=> ("Sally" "Brown")
        ;;}}
        ))
      (slide
       :title "Maps and keywords"
       (hlclj
        ;;{{
        (:first {:first "Sally" :last "Brown"})
        ;;=> "Sally"
        
        (:last {:first "Sally"})
        ;;=> nil

        (:last {:first "Sally"} :MISS)
        ;;=> :MISS
        ;;}}
        ))
      (slide
       :title "Exercise: Modeling yourself"
       (p "Make a map representing yourself. Make sure it contains your first"
          " name and last name. Then, add your hometown to the map using "
          (code "assoc") " or " (code "merge") "."))
      (slide
       :title "Collections of collections"
       (hlclj
        ;;{{
        [{:name "Mercury"}
         {:name "Venus"}
         {:name "Earth" :moons ["The Moon"]}
         {:name "Mars" :moons ["Phobos" "Deimos"]}
         {:name "Jupiter"
          :moons ["Ganymede" "Callisto" "Io" "Europa"]}]
        ;;}}
        ))
      (slide
     :title "Exercise: Get the names of people"
     (bullet "Create a function called " (code "get-names") " that takes a "
             "vector of maps of people and returns a vector of their names.")
     (hlclj
      ;;{{
      (get-names [{:first "Margaret" :last "Atwood"}
                  {:first "Doris" :last "Lessing"}
                  {:first "Ursula" :last "Le Guin"}
                  {:first "Alice" :last "Munro"}])
      
      ;;=> ["Margaret Atwood" "Doris Lessing"
      ;;    "Ursula Le Guin" "Alice Munro"]
      ;;}}
      ))
      (slide
       :title "Exercise: Modeling your classmates"
       (ol
        (li "Take the map from the last exercise -- the one about you.")
        (li "Find two or three classmates. Ask their name and hometown. "
            " Make a vector of maps with their information.")
        (li "Then, add your information to their information using "
            (code "conj") ".")))
      ))))

(page "module5.html"
      (:require [hoplon.reveal :refer [slideshow intro bullet chapter slide
                                       notes highlight column quicklist]]
                [tailrecursion.hoplon.reload :refer [reload-all]]))

(when (= (-> js/window .-location .-search) "?dev")
  (print "Autoreloading")
  (reload-all))

(defn code-list
  [& lst]
  (interpose ", " (map code lst)))

(defelem hlclj
  [attrs children]
  (highlight (assoc attrs :class "clojure") children))

(html
  (head)
  (body
    (slideshow
     :theme "mozilla-theme.css"
     (intro
      :title "Module 5") 
     (chapter
      :title "Function library"
      (slide
       :title "Comparison functions"
       (hlclj
        ;;{{
        (= 1 2)    ;=> false
        (> 4 3)    ;=> true
        (>= 4 5)   ;=> false
        (< -1 1)   ;=> true
        (<= -1 -2) ;=> false
        ;;}}
        ))
      (slide
       :title "Using comparison functions"
       (hlclj
        ;;{{
        (defn vegetarian?
          [person]
          (= :vegetarian (get person :dietary-restrictions)))
        ;;}}
        ))      
      (slide
       :title "String functions"
       (hlclj
        ;;{{
        (str "Chocolate" ", " "strawberry" ", and " "vanilla")
        ;;=> "Chocolate, strawberry, and vanilla"
        ;;}}       
        ))
      (slide
       :title (h3 "Using " (code "str") " with " (code "reduce"))
       (hlclj
        ;;{{       
        (defn join-with-space
          [string1 string2]
          (str string1 " " string2))

        (reduce join-with-space
                ["i" "like" "peanut" "butter" "and" "jelly"])
        ;;=> "i like peanut butter and jelly"
        ;;}}       
        ))
      (slide
       :title (h3 "Using " (code "str") " with " (code "reduce"))
       (hlclj
        ;;{{
        (reduce join-with-space
                ["i" "like" "peanut" "butter" "and" "jelly"])
        ;;=> "i like peanut butter and jelly"
        
        (join-with-space "i" "like")
        (join-with-space "i like" "peanut")
        (join-with-space "i like peanut" "butter")
        (join-with-space "i like peanut butter" "and")
        (join-with-space "i like peanut butter and" "jelly")
        ;;}}
        ))
      (slide
     :title "Anonymous functions"
     (hlclj
      ;;{{      
      (map (fn [x] (* 3 x)) [1 2 3]) ;=> [3 6 9]
      
      (reduce (fn [x y] (+ x y)) [1 2 3]) ;=> 6
      
      (reduce
        (fn [s1 s2] (str s1 " " s2))
        ["i" "like" "peanut" "butter" "and" "jelly"])
        ;=> "i like peanut butter and jelly"
      ;;}}     
      )))
     )))

(page "module8.html"
      (:require [hoplon.reveal :refer [slideshow intro bullet chapter slide
                                       notes highlight column quicklist]]
                [tailrecursion.hoplon.reload :refer [reload-all]]))

(when (= (-> js/window .-location .-search) "?dev")
  (print "Autoreloading")
  (reload-all))

(defelem hlclj
  [attrs children]
  (highlight (assoc attrs :class "clojure") children))

(html
  (head)
  (body
    (slideshow
     :theme "mozilla-theme.css"
     (intro
      :title "Module 8")
     (chapter
      :title "Projects"
      (slide
       :title "Creating a project"
       (p "Type the following in your terminal:")
       (highlight
        :class "bash"
        "lein new clojurebridge global-growth "))
      (slide
       :title "Leiningen"
       (quicklist
        "manages Clojure projects"
        "tool you run in your terminal"
        "silly name"))
      (slide
       :title "Project structure"
       (quicklist
        ".gitignore"
        "doc/intro.md"
        (b "project.clj")
        "resources/"
        "README.md"
        (b "src/global_growth/core.clj")
        "test/global_growth/core_test.clj"))
      (slide
       :title "project.clj"
       (quicklist
        "configuration file for Leiningen"
        "lists dependencies"
        "contains information about program author, description and more"))
      (slide
       :title "src/global_growth/core.clj"
       (p "This is where we will be writing much of our code.")
       (p "Clojure programs can be made up of multiple files, but we are "
          "going to use just this one for now."))
      (slide
       :title "Try it out"
       (p "Go to the command line and enter:")
       (highlight
        :class "bash"
        ;;{{
        cd global_growth
        lein run
        ;;}}
        )))
     (chapter
      :title "Modifying a project"
      (slide
       :title "What happens when I run my program?"
       (p "Open " (code "src/global_growth/core.clj") ".")
       (p "What is in the " (code "-main") " function?"))
      (slide
       :title "The -main function"
       (quicklist
        "Just an ordinary function with an odd name"
        "The function called first when you run your program"
        "Can call other functions"))
      (slide
       :title "Using other functions from -main"
       (hlclj
        ;;{{
        (defn quotify
          [quote author]
          (str quote "\n\n-- " author))
        
        (defn -main
          [& args]
          (println
           (quotify (str "A man who carries a cat by the tail learns "
                         "something he can learn in no other way.")
                    "Mark Twain")))
        ;;}}
        ))
      (slide
       :title "Namespaces and organization"
       (p "Namespaces let you organize your code into logical sections.")
       (hlclj
        ;;{{
        ;; in src/global_growth/core.clj
        (ns global-growth.core)
        ;;}}
        ))
      (slide
       :title "Dependencies"
       (p "Dependencies are code libraries others have written you can reuse in your project.")
       (p "Open " (code "project.clj") " and look for the " (code ":dependencies") " key.")
       (hlclj
        ;;{{
        :dependencies [[org.clojure/clojure "1.5.1"]
                       [clj-http "0.9.0"]
                       [cheshire "5.3.1"]]
        ;;}}
        ))
      (slide
       :title "Requiring dependencies"
       (hlclj
        ;;{{
        ;; in src/global_growth/core.clj
        (ns global-growth.core
          (:require [clj-http.client :as client]
                    [cheshire.core :as json]))
        ;;}}
        )))
     (chapter
      :title "Your first real program"
      (slide
       :title "The World Bank API"
       (quicklist
        "collection of world development indicators data"
        "provided as JSON documents"))
      (slide
       :title "What is an API?"
       (ul
        (li "Application Programming Interface")
        (li "web pages for computers")
        (li "one popular format: JSON")))
      (slide
       :title "API in action"
       (p "http://api.worldbank.org/countries/all/indicators/EN.POP.DNST?format=json&date=2010"))
      (slide
       :title "Sample API response"
       (highlight
        :class "json"
        ;;{{
[
  {
    "page": 1,
    "pages": 6,
    "per_page": "50",
    "total": 252
  },
  [
    {
      "indicator": {
        "id": "EN.POP.DNST",
        "value": "Population density (people per sq. km of land area)"
      },
      "country": {
        "id": "1A",
        "value": "Arab World"
      },
      "value": "25.5287276250072",
      "decimal": "0",
      "date": "2010"
    },
    {
      "indicator": {
        "id": "EN.POP.DNST",
        "value": "Population density (people per sq. km of land area)"
      },
      "country": {
        "id": "S3",
        "value": "Caribbean small states"
      },
      "value": "17.0236186241818",
      "decimal": "0",
      "date": "2010"
    }
  ]
]
        ;;}}
        ))
      (slide
       :title "Accessing APIs with Clojure"
       (hlclj
        ;;{{
        (client/get "http://api.worldbank.org/countries/all/indicators/EN.POP.DNST?format=json&date=2010")

        ;; elided and formatted
        ;;=> {:orig-content-encoding nil,
        ;;    :request-time 109, :status 200,
        ;;    :headers {"content-length" "10340",
        ;;              "content-type" "application/json;charset=utf-8"},
        ;;    :body "[{\"page\":1,\"pages\":6}]"}
        ;;}}
        ))
      (slide
       :title "Converting JSON"
       (hlclj
        ;;{{
        (json/parse-string "[{\"page\":1,\"pages\":6}]" true)
        ;;=> ({:page 1, :pages 6})
        ;;}}
        ))
      (slide
       :title "Exercise: Get the results from API call"
       (p "Write a function called " (code "get-population-density") " that takes no arguments, and returns Clojure data from the World Bank API on population density.")
       (p "You will need to make the web request, pull the " (code ":body") " value out of the response, and then parse the JSON.")
       (hlclj
        ;;{{
        (get-population-density)
        ;;=> ({:page 1, :pages 6, :per_page "50", :total 252}
        ;;    [{:indicator {:id "EN.POP.DNST", :value "Population density (people per sq. km of land area)"},
        ;;    :country {:id "1A", :value "Arab World"}, :value "25.5287276250072", :decimal "0", :date "2010"},
        ;;    ...])        
        ;;}}
        ))
      (slide
       :title "Getting more information from the API"
       (hlclj
        ;;{{
        (defn get-api
          "Returns map representing API response."
          [path params]
          (let [url (str "http://api.worldbank.org" path)
                query-params (merge params {:format "json" :per_page 10000})
                response (json/parse-string
                          (:body
                           (client/get url {:query-params query-params})) true)
                metadata (first response)
                results (second response)]
            {:metadata metadata
             :results results}))
        ;;}}
        ))
      (slide
       :title "get-api"
       (hlclj
        ;;{{
(get-api "/countries/all/indicators/EN.POP.DNST" {:date 2010})
;;=> {:metadata {:page 1, :pages 1, :per_page "10000", :total 252},
;;    :results [{:indicator {:id "EN.POP.DNST",
;;    :value "Population density (people per sq. km of land area)"},
;;    :country {:id "1A", :value "Arab World"}, :value "25.5287276250072",
;;    :decimal "0", :date "2010"} ...]}
        ;;}}
        ))
      (slide
       :title "Exercise: extracting the data we want"
       (p "Write a function " (code "get-country-and-value") " that can take "
          "the return value of " (code "get-api") " and get the country names "
          "and values out of that value. " (code "get-country-and-value")
          " should return a vector of vectors.")
       (hlclj
        ;;{{
(get-country-and-value
  (get-api "/countries/all/indicators/EN.POP.DNST" {:date 2010}))
;;=> [["Arab World" "25.5287276250072"]
;;    ["Caribbean small states" "17.0236186241818"]
;;    ...]
        ;;}}
        ))
      (slide
       :title "Removing unwanted data"
       (p "Uncomment the definitions for " (code "remove-aggregrate-countries")
          ", " (code "countries") ", and " (code "get-indicator-values") "."))
      (slide
       :title "get-indicator-values"
       (hlclj
        ;;{{
(defn get-indicator-values
  "Returns indicator values for a specified year for all countries."
  [indicator-code year]
  (let [response (get-api (str "/countries/all/indicators/"
                               indicator-code)
                          {:date (str year)})
        values (get-country-and-value response)]
    (for [[country value] values
          :when (and (not (nil? value))
                     (contains? @countries country))]
      [country (read-string value)])))

        ;;}}
        ))
      (slide
       :title "Get a list of countries and population density"
       (hlclj
        ;;{{
(get-indicator-values "EN.POP.DNST" 2010)
        ;;}}
        )
       (p "What do you get?")))
     (chapter
      :title "Revisiting -main"
      (slide
       :title "Updating -main"
       (ul
        (li "Let's make our program print out a list of all countries and their population density.")
        (li "Make sure " (code "-main") " is the last function in your file.")))
      (slide
       :title "doseq"
       (p "In order to print out all the countries and population densities, you will need a new statement, " (code "doseq") ".")
       (p (code "doseq") " works like " (code "for") " but executes its body and returns nothing.")
       (hlclj
        ;;{{
        (doseq [name ["Akeelah" "Bhamini" "Cierra"]]
          (println name))
        ;;}}
        ))
      (slide
       :title "Exercise: Finish -main"
       (p "Using " (code "doseq") " and " (code "println") ", write a " (code "-main") " function that prints out all the countries and their population densities from the World Bank API.")
       (p "Use " (code "(get-indicator-values \"EN.POP.DNST\" 2010)") " to get the values you need."))
      (slide
       :title "Bonus exercise: Only show the top 10 countries"
       (p "Change your " (code "-main") " function to only print out the top 10 countries and their population densities. You will need the " (code "sort-by") " function to make this work."))))))

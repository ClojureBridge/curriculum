(page "module3.html"
      (:require [hoplon.reveal :refer [slideshow intro bullet chapter slide
                                       notes highlight column quicklist]]
                [tailrecursion.hoplon.reload :refer [reload-all]]))

(when (= (-> js/window .-location .-search) "?dev")
  (print "Autoreloading")
  (reload-all))

(defn code-list
  [& lst]
  (interpose ", " (map code lst)))

(defelem hlclj
  [attrs children]
  (highlight (assoc attrs :class "clojure") children))

(html
  (head)
  (body
    (slideshow
     :theme "mozilla-theme.css"
     (intro
      :title "Module 3") 
     (chapter
      :title "Functions"
      (slide
       :title "What are functions?"
       (ul
        (li (code-list "count" "conj" "first"))
        (li (code-list "+" "-" "*" "/"))
        (li "A piece of code that takes values and returns a value")))
      (slide
       :title "An example function"
       (hlclj
        ;;{{      
        (defn total-bill
          "Given subtotal of bill, return total after tax."
          [subtotal]
          (* 1.08 subtotal)) 

        (total-bill 8.5)  ;=> 9.18
        (total-bill 50)   ;=> 54.0
        (total-bill 50/6) ;=> 9.0
        ;;}}       
        ))
      (slide
       :title "An example function"
       (hlclj
        ;;{{      
        (defn ; specifies that we are defining a function
          total-bill ; the name of this function
          
          ;; documentation, optional
          "Given subtotal of bill, return total..."
          
          [x] ; list of arguments

          ;; body of function
          (* 1.08 subtotal))
        ;;}}       
        ))
      (slide
       :title "A function with multiple arguments."
       (hlclj
        ;;{{
        (defn total-with-tip
          "Given subtotal, return total after tax and tip."
          [subtotal tip-pct] ;; takes 2 arguments
          (* 1.08 subtotal (+ 1 tip-pct)))

        (total-with-tip 12 0.18) ;=> 15.93
        ;;}}
        ))
    (slide
     :title "Find per-person share of bill among a group"
     (p "Modify our " (code "total-with-tip") " function, and call the new function " (code "share-per-person") ", that additionally takes in as an argument the number of people in the group for a bill.")
     (p "Have the function return the average bill amount per person."))
    (slide
     :title "Naming functions"
     (ul
      (li "Functions are named like any other value")
      (li (p "Predicate functions usually end in " (code "?"))
          (ul
           (li (code "zero?"))
           (li (code "vector?"))
           (li (code "empty?")))))))
     (chapter
      :title "Functions that take other functions"
      (slide
       :title (h3 (code "map"))
       (hlclj
        ;;{{       
        (def dine-in-orders [12.50 20 21 16 18.40])
        (def take-out-orders[6.00 6.00 7.95 6.25])
        
        (map total-bill dine-in-orders)
          ;=> [13.5 21.6 22.68 17.28 19.872]
        (map total-bill take-out-orders)
          ;=> [6.48 6.48 8.586 6.75]
        ;;}}       
        ))
      (slide
       :title (h3 (code "reduce"))
       (hlclj
        ;;{{
        (defn add
          [x y]
          (+ x y))

        (reduce add [1 2 3]) ;=> 6
        ;;}}
        ))
      (slide
       :title (h3 (code "reduce") " in action")
       (hlclj
        ;;{{       
        (def take-out-totals [6.48 6.48 8.586 6.75])
        
        (reduce add take-out-totals) ;=> 28.296 
        ;;}}       
        ))
      (slide
       :title (h3 (code "reduce") " in action")
       (hlclj
        ;;{{
        (def take-out-totals [6.48 6.48 8.586 6.75])
        (reduce add take-out-totals) ;=> 28.296 

        (add 6.48    6.48)  ;=> 12.96
        (add 12.96   8.586) ;=> 21.546
        (add 21.546  6.75)  ;=> 28.296
        ;;}}       
        ))
    
    (slide
      :title "Exercise: Find the average"
      (p "Create a function called " (code "average") " that takes a vector of "
         "bill amounts and returns the average of those amounts.")
      (p "Hint: you will need to use "
         (code "reduce") " and " (code "count") "."))))))

(ns example-deck.chapter2
    (:require [hoplon.reveal :refer [chapter slide notes bullet]]
              [example-deck.sample-code :as sample-code]))


(defn slides []
  (chapter :title "Web Dev w/Clojure"
    (slide :title "The Big Secret"
      (ul
        (li "Web development is functional")
        (li "Clojure is great at web development"))
      (notes "A request comes in, a transformation is performed, a response is "
             "returned. Web development lends itself to functional programming "
             "well. Many people new to Clojure think that Clojure isn't the "
             "best language for web development because it doesn't have a "
             "comprehensive framework like Play or Ruby on Rails."))
    (slide :title "The Ring Cycle"
      (img :src "img/ring.png")
      (notes "Clojure provides good facilities for creating web apps with Ring"))
    (slide :title "A simple Ring app"
      (sample-code/get-simple-ring-app))
    (slide :title "Libraries over frameworks"
      (ul
        (li "Routing - Compojure")
        (li "Templating - Hiccup or Selmer")
        (li "SQL - Korma")
        (li "i18n and l10n - Tower")
        (li "Asset pipeline - Optimus or Stefon")
        (li (strong "Luminus")
            (text " wraps many of these up in a set of Leiningen tasks.")))
      (notes "Clojure just has a different approach: libraries that work well "
             "together and that you can mix and match. Does this make getting "
             "started harder? Yes, because you have to pick your tools. But "
             "once you start, Clojure web development can be a blast."))
    (slide :title "Next-Level Web Apps"
     (ul
      (li "Single-page apps")
      (li "APIs")
      (li "WebSockets"))
     (notes
      (bullet "When things get more complicated, though, how can Clojure help "
              "us?")
      (bullet "I'm going to show three libraries that have helped me "
              "greatly")))))
